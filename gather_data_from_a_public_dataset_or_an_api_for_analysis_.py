# -*- coding: utf-8 -*-
"""Gather data from a public dataset or an API for analysis.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PlVPXpQ_cXXfwFyUZXyNx2fmbBygWOXN

## Data Extraction and Analysis
"""

!pip install pdfplumber

import pdfplumber
import pandas as pd
import matplotlib.pyplot as plt

pdf_path = "movie_data.pdf"
data = []

with pdfplumber.open(pdf_path) as pdf:
    for page in pdf.pages:
        text = page.extract_text()
        lines = text.split('\n')
        for line in lines:
            # Skip headers or any lines that don't contain data
            if line.startswith("Movie Name") or line.startswith("movie_data") or line.strip() == "":
                continue

            # Split columns (adjust based on actual spacing or use a more sophisticated method)
            parts = [p.strip() for p in line.split() if p.strip()]

            # Assuming you expect exactly 3 columns, handle cases where this might not be true
            if len(parts) == 3:
                data.append(parts)
            else:
                print(f"Skipping line due to unexpected format: {line}")

# Convert to DataFrame
if data:
    df = pd.DataFrame(data, columns=["Movie Name", "Release Date", "Opening Day"])

    # Basic Report: Show the first few rows of the DataFrame
    print("Movie Data Report:")
    print(df.head())

    # Basic Analysis: Count of movies per release year (assuming date format is YYYY-MM-DD)
    df['Release Year'] = pd.to_datetime(df['Release Date']).dt.year
    release_year_counts = df['Release Year'].value_counts().sort_index()
    print("\nMovies per Release Year:")
    print(release_year_counts)

    # Graph: Bar chart of movies per release year
    plt.figure(figsize=(10, 6))
    release_year_counts.plot(kind='bar')
    plt.title('Movies per Release Year')
    plt.xlabel('Release Year')
    plt.ylabel('Number of Movies')
    plt.tight_layout()
    plt.show()

    # Additional Graph: Histogram of opening day values (assuming they are numeric)
    try:
        df['Opening Day'] = pd.to_numeric(df['Opening Day'])
        plt.figure(figsize=(10, 6))
        df['Opening Day'].plot.hist(bins=10)
        plt.title('Distribution of Opening Day Values')
        plt.xlabel('Opening Day Value')
        plt.ylabel('Frequency')
        plt.tight_layout()
        plt.show()
    except ValueError:
        print("Opening Day values are not numeric, cannot generate histogram.")
else:
    print("No data extracted.")

"""Data Cleaning"""

import numpy as np

def parse_opening_day(value):
    try:
        if "Cr" in value:
            num = value.split("Cr")[0].strip()
            return float(num) if num not in ["0", "0.0", "N.A.", "N.A"] else np.nan
        else:
            return np.nan
    except:
        return np.nan

df["Opening Day (Cr)"] = df["Opening Day"].apply(parse_opening_day)
df["Release Date"] = pd.to_datetime(df["Release Date"], errors='coerce', dayfirst=True)

"""# Analysis"""

top_10 = df.dropna(subset=["Opening Day (Cr)"]).sort_values("Opening Day (Cr)", ascending=False).head(10)
print(top_10[["Movie Name", "Release Date", "Opening Day (Cr)"]])